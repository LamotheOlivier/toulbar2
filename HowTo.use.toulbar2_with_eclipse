# TUTORIAL VERSION 1
# AUTHOR : KAD

PREREQUISITES:
sudo apt-get update

- Connecting to git without login :
create an ssh key without pass phrase.
cd ~/.ssh && ssh-keygen -t ed25519 -C "toto@free.fr"
cat id_ed25519.pub, copy the output, use it to create a new ssh key on github. see Settings of your account. 
git clone git@github.com:toulbar2/toulbar2.git

- sudo apt install cmake cmake-data cmake-curses-gui libboost-all-dev libboost-graph-dev zlib1g-dev liblzma-dev libjemalloc-dev libgmp3-dev htop sudo libomp-dev openmpi*

- sudo apt install texstudio doxygen graphviz texlive-latex-recommended  texlive-fonts-recommended 

- Install last version Eclipse IDE for Scientific Computing which support mpi, openmpi; Parallel Tools Plateform (PTP)
for instance via https://www.eclipse.org/downloads/packages/

1 - SHELL PHASE

In toulbar2 folder create a build folder.
cd build
Do ccmake .. to configure the build ( c to configure, g to generate, q to quit)
nb : do sudo apt-get install libboost-all-dev to install boost_mpi boost_serialize ...

Do cmake .. to create the Makefile ( cmake .. has to be done each time new files are added to the project)
Do make -j8 where 8 is the number of cores on your computer

nb : re-execute cmake .. in build directory to update the Makefile
if you add files in the code of toulbar2

nb : ccmake .. means execute ccmake (ccmake configure cmake tool which in turn produce a makefile)
with the CMakeLists.txt file in the parent directory.

nb : build folder can be named as you wish : for instance you can
create 2 folders : one folder named "debug" for the debug version, 
the other named "release" for the release version.

IMPORTANT IF YOU CAN UPDATE GIT : 
put the following lines and others in .gitignore to avoid polluting the repo with build folder and eclipse project files.
release/
debug/
*.cproject
*.project

prÃ©requisites : two following "parallel" folders :
1 - toulbar2/src
2 - toulbar2/release   build folder has to be created if it does not exist


- cd build  (where build designate debug or release folder or whatever)

- Configure cmake with ccmake tool: ccmake .. (where the 2 point designate the parent directory namely toulbar2)
select the option you need e.g. replace Release by Debug, etc ...
type c to configure cmake then g to generate conf files.

- Run cmake .. (cmake with only one c this time).
this will generate make file and other stuff.

- make -j8 to compile on an 8 cores machine which produce the exe file
toulbar2/debug/bin/Linux/toulbar2  



2 - ECLIPSE PHASE

Eclipse does not seem to deal properly with existing cmake project: plugin are more or less obsolete, ...
so we import a makefile project to use make -j8 through eclipse.
Open eclipse and create a workspace named e.g. toulbar2_eclipse_workspace for instance in your home directory.
note that toulbar2_eclipse_workspace and toulbar2 are distinct folders. Eclipse uses the former one to save its metadata,
the latter is used by eclipse through .project and .cproject files to write  the workbench parameters, etc
the workbench designate the actual "workspace" where you write your code.

- Create the toulbar2 eclipse project :
File -> Import -> C/C++ -> Existing code as Makefile project
nb : the version used here is eclipse scientific computing 2019-06 (eclipse cdt with parallel tools)

- enter a name for the project : toulbar2_debug for instance
- enter  the path to toulbar2 folder
- choose linux GCC as a toolchain
- validate with finish button

=> the project is created in eclipse

- select project folder on the upper left and go to menu Project -> properties -> C/C++ build
uncheck  use default build command and add type make -j8  ( j = jobs : where 8 is your number of processors, more than 8 is also possible with only 8 cores)
this wil trigger a faster parallel compilation. (alternatively, go in Behavior tab and choose enable parallel build
add release to build directory i.e. ${workspace_loc:/toulbar2_release}/release
to tell eclipse where to build toulbar2.
clic Manage configurations > rename Default with release then create
a debug configuration if you have compiled and created a debug folder too.
then in eclipse Projet menu you will be able to set  the default configuration.

toulbar2 executable will be created in release/bin/Linux directory.

To use the toulbar2 you just build, and not a possibly other version installed in your system,
go to release/bin/Linux directory and use ./toulbar2  file.wcsp put your wcsp files in this current folder.


- in C/C++ general -> code analysis check use project settings and uncheck all to avoid false warning and errors

- in formatter choose a format for your code that you like. Normally toulbar2 uses K&R format style

- to have the code formatted when saving the file : windows -> Preferences -> C/C++ -> editor -> Saves Actions -> select Format source Code -> format for all lines
- mannually format the code with ctrl+shift+F

- To change font in editor : Windows -> Preferences -> General -> Appearance -> Color and font -> C/C++ -> C/C++ editor text font -> button Edit


- To execute toulbar2 from eclipse with arguments : Menu Run -> Run configuration -> C/C++ Application -> toulbar2 release default
add toulbar2/build/bin/Linux/toulbar2 the path to the program toulbar2
then in tab Argument add the argument to use with toulbar2 e.g.  a wcsp file name and other toulbar2 options.
Choose your working folder e.g. ${workspace_loc:toulbar2}/release/bin/Linux so that to avoid to place wcsp files in toulbar2 folder.
You can also run a parallel run configuration.





