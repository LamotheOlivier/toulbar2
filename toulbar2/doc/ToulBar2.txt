********************************
* ToulBar2 Brief User Overview *
********************************
toulbar2  version : 0.9.4.1, copyright (c) INRA 2011

________________________________________________________________________________
Solve a simple weighted constraint satisfaction problem (WCSP)
with default options:

	toulbar2 ../validation/default/example.wcsp

Read 25 variables, with 5 values at most, and 63 cost functions, with maximum arity 2.
Cost function decomposition time : 0 seconds.
24 unassigned variables, 120 values in all current domains and 62 constraints.
Initial lower and upper bounds: [18,64[
New solution: 28 (0 backtracks, 8 nodes, depth 8)
New solution: 27 (123 backtracks, 250 nodes, depth 7)
Optimum: 27 in 233 backtracks and 463 nodes and 0.04 seconds.
end.

________________________________________________________________________________
Solve a WCSP with an initial upperbound and save one of its optimal solution
in filename "sol":

	toulbar2 ../validation/default/example.wcsp -ub=28 -w

Read 25 variables, with 5 values at most, and 63 cost functions, with maximum arity 2.
Cost function decomposition time : 0 seconds.
24 unassigned variables, 120 values in all current domains and 62 constraints.
Initial lower and upper bounds: [18,28[
New solution: 27 (228 backtracks, 463 nodes, depth 7)
Optimum: 27 in 298 backtracks and 596 nodes and 0.04 seconds.
end.

cat sol
# each value corresponds to one variable assignment in problem file order
 1 0 1 2 0 2 0 4 2 0 3 1 0 0 3 0 1 1 2 4 2 1 1 4 1

________________________________________________________________________________
Solve a WCSP using a limited discrepancy search strategy in order to speed-up
finding good upper bounds first:

	toulbar2 ../validation/default/example.wcsp -l

Read 25 variables, with 5 values at most, and 63 cost functions, with maximum arity 2.
Cost function decomposition time : 0 seconds.
24 unassigned variables, 120 values in all current domains and 62 constraints.
Initial lower and upper bounds: [18,64[
--- [0] LDS 0 --- (0 nodes)
New solution: 28 (0 backtracks, 8 nodes, depth 1)
--- [0] LDS 1 --- (8 nodes)
--- [0] LDS 2 --- (25 nodes)
New solution: 27 (4 backtracks, 34 nodes, depth 3)
--- [0] LDS 4 --- (67 nodes)
--- [0] Search with no discrepancy limit --- (255 nodes)
Optimum: 27 in 290 backtracks and 657 nodes and 0.04 seconds.
end.

________________________________________________________________________________
Solve a WCSP using Depth-First Brand and Bound with Tree Decomposition (BTD)
and a min-fill order:

    ../misc/bin/Linux/peo ../validation/default/example.wcsp 3 > example.order

	toulbar2 ../validation/default/example.wcsp -B=1 example.order 

Read 25 variables, with 5 values at most, and 63 cost functions, with maximum arity 2.
Cost function decomposition time : 0 seconds.
24 unassigned variables, 120 values in all current domains and 62 constraints.
Initial lower and upper bounds: [17,64[
Tree decomposition width  : 8
Tree decomposition height : 16
Number of clusters        : 18

Tree decomposition time: 0 seconds.
New solution: 27 (259 backtracks, 506 nodes, depth 0)
Optimum: 27 in 259 backtracks and 506 nodes and 0.03 seconds.
end.

________________________________________________________________________________
Solve a WCSP using Russian Doll Search exploiting BTD on small separators only:

	toulbar2 ../validation/default/example.wcsp -B=2 -r=3 example.order

Read 25 variables, with 5 values at most, and 63 cost functions, with maximum arity 2.
Cost function decomposition time : 0 seconds.
24 unassigned variables, 120 values in all current domains and 62 constraints.
Initial lower and upper bounds: [17,64[
Tree decomposition width  : 22
Tree decomposition height : 24
Number of clusters        : 4

Tree decomposition time: 0 seconds.
--- Solving cluster subtree 0 ...
New solution: 0 (0 backtracks, 0 nodes, depth 1)
---  done  cost = 0 (0 backtracks, 0 nodes, depth 1)

--- Solving cluster subtree 1 ...
New solution: 0 (0 backtracks, 1 nodes, depth 2)
---  done  cost = 0 (1 backtracks, 1 nodes, depth 1)

--- Solving cluster subtree 2 ...
New solution: 9 (1 backtracks, 11 nodes, depth 11)
New solution: 8 (7 backtracks, 12 nodes, depth 6)
---  done  cost = 8 (181 backtracks, 356 nodes, depth 1)

--- Solving cluster subtree 3 ...
New solution: 27 (181 backtracks, 356 nodes, depth 1)
---  done  cost = 27 (181 backtracks, 356 nodes, depth 1)

Optimum: 27 in 181 backtracks and 356 nodes and 0.02 seconds.
end.

________________________________________________________________________________
Solve a WCSP using bounded (of degree at most 3) variable elimination
followed by BTD:

	toulbar2 ../validation/default/example.wcsp -p=3 -B=1 example.order

Read 25 variables, with 5 values at most, and 63 cost functions, with maximum arity 2.
Maximum degree of generic variable elimination: 3
Cost function decomposition time : 0 seconds.
23 unassigned variables, 115 values in all current domains and 62 constraints.
Initial lower and upper bounds: [18,64[
Tree decomposition width  : 8
Tree decomposition height : 16
Number of clusters        : 18

Tree decomposition time: 0 seconds.
New solution: 27 (258 backtracks, 501 nodes, depth 0)
Optimum: 27 in 258 backtracks and 501 nodes and 0.04 seconds.
end.

________________________________________________________________________________
Solve a WCSP using Virtual Arc Consistency (VAC) in preprocessing and
multiplying all costs by a constant 100 (usefull if initial costs are small):

	toulbar2 ../validation/default/example.wcsp -A -C=100

Read 25 variables, with 5 values at most, and 63 cost functions, with maximum arity 2.
Lb before VAC: 1800
Cost function decomposition time : 0 seconds.
Preprocessing VAC mean lb/incr: 17.2258     total increments: 31     cyclesize: 14.6774     k: 2.32258 (mean), 6 (max)
Lb after VAC: 2343
24 unassigned variables, 120 values in all current domains and 62 constraints.
Initial lower and upper bounds: [2343,6400[
New solution: 2900 (0 backtracks, 8 nodes, depth 8)
New solution: 2800 (4 backtracks, 12 nodes, depth 6)
New solution: 2700 (25 backtracks, 54 nodes, depth 8)
VAC mean lb/incr: 4.2931     total increments: 58     cyclesize: 14.1552     k: 2.41379 (mean), 6 (max)
Optimum: 2700 in 101 backtracks and 195 nodes and 0.03 seconds.
end.

________________________________________________________________________________
Solve a WCSP using Virtual Arc Consistency (VAC) in preprocessing and during search,
multiplying all costs by a constant 100, speeding VAC convergence during search,
and exploiting a VAC-based value ordering heuristic:
 
	toulbar2 ../validation/default/example.wcsp -V -A=1000 -C=100 -T=10

Read 25 variables, with 5 values at most, and 63 cost functions, with maximum arity 2.
Lb before VAC: 1800
Cost function decomposition time : 0 seconds.
Preprocessing VAC mean lb/incr: 17.2258     total increments: 31     cyclesize: 14.6774     k: 2.32258 (mean), 6 (max)
Lb after VAC: 2343
24 unassigned variables, 120 values in all current domains and 62 constraints.
Initial lower and upper bounds: [2343,6400[
New solution: 2800 (0 backtracks, 8 nodes, depth 8)
New solution: 2700 (10 backtracks, 23 nodes, depth 7)
VAC mean lb/incr: 8.8     total increments: 140     cyclesize: 14.2214     k: 2.70714 (mean), 10 (max)
Optimum: 2700 in 30 backtracks and 56 nodes and 0.04 seconds.
end.

________________________________________________________________________________
Count the number of solutions of a CSP (i.e. null optimum) with #BTD
and default variable ordering for the problem tree decomposition:

	toulbar2 ../validation/enum/base2.wcsp -a -B=1

Read 10 variables, with 4 values at most, and 12 cost functions, with maximum arity 3.
Cost function decomposition time : 0 seconds.
10 unassigned variables, 40 values in all current domains and 14 constraints.
Initial lower and upper bounds: [0,1[
Tree decomposition width  : 4
Tree decomposition height : 8
Number of clusters        : 6

Tree decomposition time: 0 seconds.
Number of solutions    : =  4704
Number of #goods       :    304
Number of used #goods  :    224
Size of sep            :    4
Time                   :    0.01 seconds
... with 287 backtracks and 574 nodes
end.

________________________________________________________________________________
Get a quick approximation of the number of solutions of a CSP with Approx_#BTD
and default variable ordering for the problem tree decomposition:

	toulbar2 ../validation/enum/base2.wcsp -a -B=1 -D

Read 10 variables, with 4 values at most, and 12 cost functions, with maximum arity 3.
Cost function decomposition time : 0 seconds.
10 unassigned variables, 40 values in all current domains and 14 constraints.
Initial lower and upper bounds: [0,1[

part 1 : 10 variables and 12 constraints (really added)
part 2 : 4 variables and 2 constraints (really added)
--> number of parts : 2
--> time : -2.0837e-19 seconds. 

Tree decomposition width  : 3
Tree decomposition height : 6
Number of clusters        : 10

Tree decomposition time: 0 seconds.

Cartesian product 		   :    1.04858e+06
Upper bound of number of solutions : <= 7776
Number of solutions    : ~= 4374
Number of #goods       :    43
Number of used #goods  :    104
Size of sep            :    2
Time                   :    0.01 seconds
... with 101 backtracks and 202 nodes
end.

________________________________________________________________________________
Solve the Golomb problem (4 marks) in cp format

	  cd ../misc/script/
	  gawk -f ./cp2wcsp.awk ../../validation/default/golomb4.cp > ./golomb4.wcsp
	  toulbar2 ./golomb4.wcsp -s | awk -f ./solution2cp.awk ../../validation/default/golomb4.cp -

Read 10 variables, with 9 values at most, and 10 cost functions, with maximum arity 6.
Cost function decomposition time : 0.04 seconds.
6 unassigned variables, 28 values in all current domains and 18 cost functions.
Initial lower and upper bounds: [5,9[
New solution: 7 (0 backtracks, 2 nodes, depth 2)
0 1 3 7 1 3 7 2 6 4
New solution: 6 (1 backtracks, 3 nodes, depth 1)
0 1 4 6 1 4 6 3 5 2
Optimum: 6 in 2 backtracks and 4 nodes and 0.11 seconds.
end.

Try other problems in cp format available in ../../validation/default/ repository.

________________________________________________________________________________
Howto change location fo autonarcsp binary

narycsp is external binary call from toulbar2 when -i option has been used.
By default narycsp must be locate in the toulbar2 directory
if you need to change this default path , you just have to init a NARYCSP variable containing the narycsp location.
for   for csh user 
        setenv NARYCSP "/foo/My/path/for/NARYCSP/"

#       or for  bash user

        export NARYCSP="/foo/My/path/for/NARYCSP/"

________________________________________________________________________________
Get a help message on ToulBar2 options and see what are the default options:

	toulbar2

*************************
* ToulBar2 Help Message *
*************************
./toulbar2  version : 0.9.4.2, copyright (c) INRA 2011

Command line is:
./toulbar2 problem_filename [options]

Available problem formats (specified by the filename extension) are:
   *.wcsp : Weighted CSP format (see SoftCSP web site)
   *.wcnf : Weighted Partial Max-SAT format (see Max-SAT Evaluation)
   *.cnf : (Max-)SAT format
   *.uai : Bayesian network and Markov Random Field format (see UAI'08 Evaluation) followed by an optional evidence filename (perform MPE task)
   *.pre : pedigree format (see doc/MendelSoft.txt for Mendelian error correction)
   *.pre *.map : pedigree and genetic map formats (see doc/HaplotypeHalfSib.txt for haplotype reconstruction in half-sib families)
   *.bep  : satellite scheduling format (CHOCO benchmark)

   *.order  : variable elimination order
   *.sol  : solution/certificate for the problem

Warning! a New file extension can be enforced using --foo_ext=".myext" ex: --wcsp_ext='.test' --sol_ext='.sol2'  

Available options are (use symbol ":" after an option to remove a default option):
   -ub=[integer] : initial problem upperbound (default value is 1537228672809129301)
   -v=[integer] : verbosity level
   -s : shows each solution found
   -w : writes last solution found in filename "sol"
   -var=[integer] : search by branching only on the first -the given value- decision variables, assuming the remaining variables are intermediate variables completely assigned by the decision variables (use a zero if all variables are decision variables) (default value is 0)
   -b : search using binary branching always instead of binary branching for interval domains and n-ary branching for enumerated domains (default option)
   -c : search using binary branching with last conflict backjumping variable ordering heuristic (default option)
   -q : weighted degree variable ordering heuristic (default option if #constr<10*#var)
   -d : search using dichotomic branching instead of binary branching when current domain size is strictly greater than 10 (default option)
   -e=[integer] : boosting search with variable elimination of small degree (less than or equal to 3) (default value is 3)
   -p=[integer] : preprocessing only: general variable elimination of degree less than or equal to the given value (default value is -1)
   -t : preprocessing only: simulates restricted path consistency by adding ternary cost functions on triangles of binary cost functions
   -f=[integer] : preprocessing only: variable elimination of functional (f=1) (resp. bijective (f=2)) variables (default value is 2)
   -dec : preprocessing only: pairwise decomposition of cost functions with arity >=3 into smaller arity cost functions (default option)
   -h=[integer] : preprocessing only: projects n-ary cost functions on all binary cost functions if n is lower than the given value (default value is 10)
   -o : ensures optimal worst-case time complexity of DAC and EAC (can be slower in practice)
   -k=[integer] : soft local consistency level (NC with Strong NIC for global cost functions=0, (G)AC=1, D(G)AC=2, FD(G)AC=3, (weak) ED(G)AC=4) (default value is 4)
   -l=[integer] : limited discrepancy search (discrepancy bound = 4 by default)
   -L=[integer] : randomized (quasi-random variable ordering) search with restart (maximum number of nodes = 10000 by default)
   -i : initial upperbound found by INCOP local search solver (filename "./misc/bin/linux/narycsp")
   -z=[integer] : saves problem in wcsp format in filename "problem.wcsp" (1: original instance, 2: after preprocessing)
		writes also the  graphviz dot file  and the degree distribution of the input problem 
   -Z=[integer] : debug mode (save problem at each node if verbosity option -v=num >= 1 and -Z=num >=3)
   -x=[(,i=a)*] : assigns variable of index i to value a (multiple assignments are separated by a comma and no space) (without any argument, a complete assignment read from file "sol")

   -M=[integer] : preprocessing only: Min Sum Diffusion algorithm (default number of iterations is 0)
   -A=[integer] : enforces VAC at each search node with a search depth less than a given value (default value is 0)
   -T=[integer] : threshold cost value for VAC (default value is 1)
   -P=[integer] : threshold cost value for VAC during the preprocessing phase (default value is 1)
   -C=[integer] : multiplies all costs by this number (default value is 1)
   -S : preprocessing only: performs singleton consistency (only in conjunction with option "-A")
   -V : VAC-based value ordering heuristic

   -B=[integer] : (0) DFBB, (1) BTD, (2) RDS-BTD, (3) RDS-BTD with path decomposition instead of tree decomposition (default value is 0)
   -O=[filename] : reads a variable elimination order from a file in order to build a tree decomposition
                  (if not specified, then use the variable order in which variables appear in the problem file)
   -j=[integer] : splits large clusters into a chain of smaller embedded clusters with a number of proper variables less than this number
                (use options "-B=3 -j=1" for pure RDS, use value 0 for no splitting) (default value is 0)
   -r=[integer] : limit on maximum cluster separator size (merge cluster with its father otherwise, use a negative value for no limit) (default value is -1)
   -X=[integer] : limit on minimum number of proper variables in a cluster (merge cluster with its father otherwise, use a zero for no limit) (default value is 0)
   -E : merges leaf clusters with their fathers if small local treewidth (in conjunction with option "-e")
   -R=[integer] : choice for a specific root cluster number
   -I=[integer] : choice for solving only a particular rooted cluster subtree

   -a : finds all solutions (or count the number of zero-cost satisfiable solutions in conjunction with BTD)
   -D : approximate satisfiable solution count with BTD
   -logz : computes log10 of probability of evidence (i.e. log10 partition function or log10(Z)) for graphical models only (problem extension .uai)
---------------------------
Alternatively one can call the random problem generator with the following options: 

   -random=[bench profile]  : bench profile must be specified as follow :
                         n and m are respectively the number of variable and the maximum domain size  of the random problem.
			
       bin-{n}-{m}-{p1}-{p2}-{seed}       :p1 is the tightness in percentage %
                                          :p2 is the num of binary cost functions to include
                                          :the seed parameter is optional
   or:                                                                               
       binsub-{n}-{m}-{p1}-{p2}-{p3}-{seed} binary random & submodular cost functions
                                          p1 is the tightness in percentage % of random cost functions
                                          p2 is the num of binary cost functions to include
                                          p3 is the percentage % of submodular cost functions among p2 cost functions
                                           (plus 10 permutations of two randomly-chosen values for each domain)
 or:                                                                               
      tern-{n}-{m}-{p1}-{p2}-{p3}-{seed}  p3 is the num of ternary cost functions
 or:                                                                               
      nary-{n}-{m}-{p1}-{p2}-{p3}...{pn}-{seed}  pn is the num of n-ary cost functions
---------------------------
