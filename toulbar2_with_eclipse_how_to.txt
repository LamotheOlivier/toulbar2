PREREQUISITES:
sudo apt-get update

- sudo apt-get install cmake cmake-data cmake-curses-gui libboost-all-dev libboost-graph-dev libboost-iostreams-dev zlib1g-dev liblzma-dev libjemalloc-dev libgmp3-dev htop

- sudo apt-get install texstudio doxygen graphviz texlive-latex-recommended  texlive-fonts-recommended 

- Install lats version Eclipse IDE for Scientific Computing which support mpi, openmpi; Parallel Tools Plateform (PTP)
for instance via https://www.eclipse.org/downloads/packages/

1 - SHELL PHASE

In toulbar2 folder create a build folder.
cd build
Do ccmake .. to configure the build ( c to configure, g to generate, q to quit)
nb : do sudo apt-get install libboost-all-dev to install boost_mpi boost_serialize ...

Do cmake .. to create the Makefile ( cmake .. has to be done each time new files are added to the project)
Do make -j8 where 8 is the number of cores on your computer

nb : re-execute cmake .. in build directory to update the Makefile
if you add files in the code of toulbar2

nb : ccmake .. means execute ccmake (ccmake configure cmake tool which in turn produce a makefile)
with the CMakeLists.txt file in the parent directory.

nb : build folder can be named as you wish : for instance you can
create 2 folders : one folder named "debug" for the debug version, 
the other named "release" for the release version.

prÃ©requisites : two following "parallel" folders :
1 - toulbar2/src
2 - toulbar2/build    build folder has to be created if it does not exist


- cd build   (where build designate debug or release folder or whatever)

- ccmake .. (where the 2 point designate the parent directory namely toulbar2)
select the option you need e.g. replace release by DEBUG, ...
type c to configure cmake

- then cmake .. (cmake with only one c this time).
this will generate the Makefile.

- make - j 8 to compile on an 8 cores machine which produce the exe file
toulbar2/debug/bin/Linux/toulbar2  

this will generate make file and other stuff.

2 - ECLIPSE PHASE

- Import this in Eclipse with :

- File -> Import -> C/C++ -> Existing code as Makefile project
nb : the version used here is eclipse CDT of march 2019

- enter a name for the project : toulbar2_debug for instance
- enter  the path to toulbar2 folder
- choose linux GCC as a toolchain
- validate with finish button

=> the project is created in eclipse

- select project folder on the upper left and go to menu Project -> properties -> C/C++ build
uncheck  use default build command and add type make -j8  ( j = jobs : where 8 is your number of processors, more than 8 is also possible with only 8 cores)
this wil trigger a faster parallel compilation.
add build to build directory i.e. ${workspace_loc:/toulbar2_release}/build
to tell eclipse where to build toulbar2 which will be found in build/bin/Linux directory


- in C/C++ general -> code analysis check use project settings and uncheck all to avoid false warning and errors

- in formatter choose a format for your code that you like.

- to have the code formatted when saving the file : windows -> Preferences -> C/C++ -> editor -> Saves Actions -> select Format source Code -> format for all lines

- To change font in editor : Windows -> Preferences -> General -> Appearance -> Color and font -> C/C++ -> C/C++ editor text font -> button Edit


- To execute toulbar2 from eclipse with arguments : Menu Run -> Run configuration -> C/C++ Application -> toulbar2 release default
add toulbar2/build/bin/Linux/toulbar2 the path to the program toulbar2
then in tab Argument add the argument to use with toulbar2 e.g.  a wcsp file name





